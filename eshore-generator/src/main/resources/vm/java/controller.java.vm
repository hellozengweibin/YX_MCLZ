package ${packageName}.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;

import cn.hutool.core.bean.BeanUtil;
import com.eshore.common.core.response.CommonResult;
import com.eshore.common.core.response.ResponseGenerator;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.eshore.common.annotation.Log;
import com.eshore.common.core.controller.BaseController;
import com.eshore.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.domain.form.${ClassName}Form;
import ${packageName}.domain.vo.${ClassName}VO;
import ${packageName}.service.I${ClassName}Service;
import com.eshore.common.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.eshore.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */

@Api(tags = "${functionName}模块")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {
    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @ApiOperation(value = "查询${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
    #if($table.crud || $table.sub)
    public TableDataInfo<${ClassName}VO> list(${ClassName}Form ${className}) {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return getDataTable(list,${ClassName}VO.class);
    }
    #elseif($table.tree)
    public CommonResult<?> list(${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return success(list);
    }
    #end

    /**
     * 导出${functionName}列表
     */
    @ApiOperation(value = "导出${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName}Form ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    @ApiOperation(value = "获取${functionName}详细信息")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/detail/{${pkColumn.javaField}}")
    @ApiImplicitParam(name = "${pkColumn.javaField}", value = "id", required = true, dataType = "${pkColumn.javaType}")
    public CommonResult<${ClassName}VO> getDetail(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return ResponseGenerator.genSuccessResult(BeanUtil.copyProperties(${className}Service.getById(${pkColumn.javaField}),${ClassName}VO.class));
    }

    /**
     * 新增${functionName}
     */
    @ApiOperation(value = "新增${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public CommonResult<Boolean> add(@RequestBody ${ClassName}Form ${className}) {
        boolean result = ${className}Service.saveOrUpdate(BeanUtil.copyProperties(${className},${ClassName}. class));
        return result ? ResponseGenerator.genSuccessResult() : ResponseGenerator.genFailResult("新增失败");
    }

    /**
     * 修改${functionName}
     */
    @ApiOperation(value = "修改${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public CommonResult<Boolean> edit(@RequestBody ${ClassName}Form ${className}) {
        return ResponseGenerator.genSuccessResult(${className}Service.saveOrUpdate(BeanUtil.copyProperties(${className},${ClassName}. class)));
    }

    /**
     * 删除${functionName}
     */
    @ApiOperation(value = "删除${functionName}")
    @ApiImplicitParam(name = "${pkColumn.javaField}s", value = "ids", dataType = "${pkColumn.javaType}[]")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/del")
    public CommonResult<Integer> remove(@RequestBody ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return ResponseGenerator.genSuccessResult(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
    }
}
